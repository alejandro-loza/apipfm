openapi: 3.0.0
info:
  title: Finerio PFM API
  description: Description of Finerio PFM API.
  version: 0.0.1
servers:
 - url: https://pfm-sandbox.finerio.mx
   description: Sandbox server
 - url: https://pfm.finerio.mx
   description: Production server
tags:
  - name: Access
  - name: Users
  - name: Financial entities
  - name: Accounts
  - name: Transactions
  - name: Categories
  - name: Budgets
  - name: Insights
    description: Insights about user financial information.
paths:
  /signup:
    post:
      tags:
      - Access
      summary: Signs up a client.
      description: Signs up a client.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
      responses:
        '200':
          description: A client created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '500':
          description: Something in the server was wrong.
  /login:
    post:
      tags:
      - Access
      summary: Authenticates a client.
      description: Authenticates a client.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '500':
          description: Something in the server was wrong.
  /oauth/access_token:
    post:
      tags:
      - Access
      summary: Allows access token refreshing.
      description: Allows access token refreshing.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                grant_type:
                  type: string
                  example: 'refresh_token'
              required:
                - refresh_token
                - grant_type
      responses:
        '200':
          description: Refresh token data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '401':
          description: Something in the request was wrong.
        '500':
          description: Something in the server was wrong.
  /users:
    post:
      tags:
      - Users
      summary: Creates a user.
      description: Creates a user. Any kind of name with a size up to 100 characters is allowed. Usernames are unique per client.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '200':
          description: A user created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
          
        '500':
          description: Something in the server was wrong.
    get:
      tags:
      - Users
      summary: Fetches a list of users.
      description: Fetches a list of users of a client, sorted by ID in descending order. The API is able to fetch up to 100 users. If a cursor is specified, the list starts with the item that has that ID.
      parameters:
        - in: query
          name: cursor
          schema:
            type: integer
            example: 123
          required: false
          description: The ID of the user where the list starts.
      responses:
        '200':
          description: An array of users.
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Users'
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: The ID you requested was not found.
        '500':
          description: Something in the server was wrong.
  /users/{id}:
    get:
      tags:
      - Users
      summary: Fetches a user.
      description: Fetches the information of a user.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 123
          required: true
          description: The ID of the user to request.
      responses:
        '200':
          description: The information of the user requested.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: The user ID you requested was not found.
        '500':
          description: Something in the server was wrong.
    put:
      tags:
      - Users
      summary: Updates a user.
      description: Updates a user. Any kind of name with a size up to 100 characters is allowed. The new name should not be previously registered.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 123
          required: true
          description: The ID of the user to request.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '200':
          description: A user created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: The user ID you requested was not found.
        '500':
          description: Something in the server was wrong.
    delete:
      tags:
      - Users
      summary: Deletes a user.
      description: Deletes a user and all its information.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 123
          required: true
          description: The ID of the user to request.
      responses:
        '204':
          description: The user has been deleted successfully.
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: The user ID you requested was not found.
        '500':
          description: Something in the server was wrong.
  /financialEntities:
    post:
      tags:
      - Financial entities
      summary: Creates a financial entity.
      description: Creates an financial entity. Every client has its own financial entities. Every financial entity code is unique per client.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFinancialEntity'
      responses:
        '200':
          description: A financial entity created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinancialEntity'
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '500':
          description: Something in the server was wrong.
    get:
      tags:
      - Financial entities
      summary: Fetches a list of financial entities.
      description: Fetches a list of financial entities per client, sorted by ID in descending order. The API is able to fetch up to 100 financial entities. If a cursor is specified, the list starts with the item that has that ID.
      parameters:
        - in: query
          name: cursor
          schema:
            type: integer
            example: 123
          required: false
          description: The ID of the financial entity where the list starts.
      responses:
        '200':
          description: An array of financial entitites.
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/FinancialEntities'
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: The ID you requested was not found.
        '500':
          description: Something in the server was wrong.
  /financialEntities/{id}:
    get:
      tags:
      - Financial entities
      summary: Fetches a financial entity.
      description: Fetches the information of a financial entity.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 123
          required: true
          description: The ID of the financial entity to request.
      responses:
        '200':
          description: The information of the financial entity requested.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinancialEntity'
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: The financial entity ID you requested was not found.
        '500':
          description: Something in the server was wrong.
    put:
      tags:
      - Financial entities
      summary: Updates a financial entity.
      description: Updates a financial entity.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 123
          required: true
          description: The ID of the financial entity to request.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFinancialEntity'
      responses:
        '200':
          description: A financial entity updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinancialEntity'
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: The financial entity ID you requested was not found.
        '500':
          description: Something in the server was wrong.
    delete:
      tags:
      - Financial entities
      summary: Deletes a financial entity.
      description: Deletes a financial entity.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 123
          required: true
          description: The ID of the financial entity to delete.
      responses:
        '204':
          description: The financial entity has been deleted successfully.
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: The financial entity ID you requested was not found.
        '500':
          description: Something in the server was wrong.
  /accounts:
    post:
      tags:
      - Accounts
      summary: Creates an account.
      description: Creates an account. A previosuly created user is required.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccount'
      responses:
        '200':
          description: An account created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
          
        '500':
          description: Something in the server was wrong.
    get:
      tags:
      - Accounts
      summary: Fetches a list of accounts.
      description: Fetches a list of accounts per user, sorted by ID in descending order. The API is able to fetch up to 100 accounts. If a cursor is specified, the list starts with the item that has that ID.
      parameters:
        - in: query
          name: userId
          schema:
            type: integer
            example: 123
          required: true
          description: The ID of the user that owns the accounts.
        - in: query
          name: cursor
          schema:
            type: integer
            example: 123
          required: false
          description: The ID of the account where the list starts.
      responses:
        '200':
          description: An array of accounts.
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Accounts'
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: The ID you requested was not found.
        '500':
          description: Something in the server was wrong.
  /accounts/{id}:
    get:
      tags:
      - Accounts
      summary: Fetches an account.
      description: Fetches the information of an account.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 123
          required: true
          description: The ID of the account to request.
      responses:
        '200':
          description: The information of the account requested.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: The account ID you requested was not found.
        '500':
          description: Something in the server was wrong.
    put:
      tags:
      - Accounts
      summary: Updates an account.
      description: Updates an account.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 123
          required: true
          description: The ID of the account to request.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccount'
      responses:
        '200':
          description: An account updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: The account ID you requested was not found.
        '500':
          description: Something in the server was wrong.
    delete:
      tags:
      - Accounts
      summary: Deletes an account.
      description: Deletes an account and all its information.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 123
          required: true
          description: The ID of the account to request.
      responses:
        '204':
          description: The account has been deleted successfully.
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: The account ID you requested was not found.
        '500':
          description: Something in the server was wrong.
  /transactions:
    post:
      tags:
      - Transactions
      summary: Creates a transaction.
      description: Creates a transaction. A previosuly created account is required.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransaction'
      responses:
        '200':
          description: A transaction created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
          
        '500':
          description: Something in the server was wrong.
    get:
      tags:
      - Transactions
      summary: Fetches a list of transactions.
      description: Fetches a list of transactions per account, sorted by ID in descending order. The API is able to fetch up to 100 transactions. If a cursor is specified, the list starts with the item that has that ID.
      parameters:
        - in: query
          name: accountId
          schema:
            type: integer
            example: 123
          required: true
          description: The ID of the account where the list starts.
        - in: query
          name: cursor
          schema:
            type: integer
            example: 123
          required: false
          description: The ID of the transaction where the list starts.
      responses:
        '200':
          description: An array of transactions.
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Transactions'
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: The ID you requested was not found.
        '500':
          description: Something in the server was wrong.
  /transactions/{id}:
    get:
      tags:
      - Transactions
      summary: Fetches a transaction.
      description: Fetches the information of a transaction.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 123
          required: true
          description: The ID of the transaction to request.
      responses:
        '200':
          description: The information of the transaction requested.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: The transaction ID you requested was not found.
        '500':
          description: Something in the server was wrong.
    put:
      tags:
      - Transactions
      summary: Updates a transaction.
      description: Updates a transaction.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 123
          required: true
          description: The ID of the transaction to request.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTransaction'
      responses:
        '200':
          description: A transaction updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: The transaction ID you requested was not found.
        '500':
          description: Something in the server was wrong.
    delete:
      tags:
      - Transactions
      summary: Deletes a transaction.
      description: Deletes a transaction and all its information.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 123
          required: true
          description: The ID of the transaction to request.
      responses:
        '204':
          description: The transaction has been deleted successfully.
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: The transaction ID you requested was not found.
        '500':
          description: Something in the server was wrong.
  /categories:
    post:
      tags:
      - Categories
      summary: Creates a category.
      description: Creates a category. If a user ID is not specified, the category is considered as a system category. If a parent category ID is specified, the category is considered a subcategory.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategory'
      responses:
        '200':
          description: A category created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
          
        '500':
          description: Something in the server was wrong.
    get:
      tags:
      - Categories
      summary: Fetches a list of categories.
      description: Fetches a list of categories, sorted by ID in descending order. The API is able to fetch up to 100 categories. If a cursor is specified, the list starts with the item that has that ID. If a user ID is specified, both system and user categories are fetched. If a user ID is not specified, only system categories are fetched.
      parameters:
        - in: query
          name: userId
          schema:
            type: integer
            example: 123
          required: false
          description: The ID of the user.
        - in: query
          name: cursor
          schema:
            type: integer
            example: 123
          required: false
          description: The ID of the category where the list starts.
      responses:
        '200':
          description: An array of categories.
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Categories'
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: The ID you requested was not found.
        '500':
          description: Something in the server was wrong.
  /categories/{id}:
    get:
      tags:
      - Categories
      summary: Fetches a category.
      description: Fetches the information of a category.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 123
          required: true
          description: The ID of the category to request.
      responses:
        '200':
          description: The information of the category requested.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: The category ID you requested was not found.
        '500':
          description: Something in the server was wrong.
    put:
      tags:
      - Categories
      summary: Updates a category.
      description: Updates a category.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 123
          required: true
          description: The ID of the category to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategory'
      responses:
        '200':
          description: A category updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: The category ID you requested was not found.
        '500':
          description: Something in the server was wrong.
    delete:
      tags:
      - Categories
      summary: Deletes a category.
      description: Deletes a category and all its information.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 123
          required: true
          description: The ID of the category to request.
      responses:
        '204':
          description: The category has been deleted successfully.
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: The category ID you requested was not found.
        '500':
          description: Something in the server was wrong.
  /budgets:
    post:
      tags:
      - Budgets
      summary: Creates a budget.
      description: Creates a budget. A previosuly created user and a category is required. If a parent budget ID is specified thee budget is considered a sub budget.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBudget'
      responses:
        '200':
          description: A budget created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
          
        '500':
          description: Something in the server was wrong.
    get:
      tags:
      - Budgets
      summary: Fetches a list of budgets.
      description: Fetches a list of budgets per user, sorted by ID in descending order. The API is able to fetch up to 100 budgets. If a cursor is specified, the list starts with the item that has that ID. A previously created user is required.
      parameters:
        - in: query
          name: userId
          schema:
            type: integer
            example: 123
          required: true
          description: The ID of the user.
        - in: query
          name: cursor
          schema:
            type: integer
            example: 123
          required: false
          description: The ID of the budget where the list starts.
      responses:
        '200':
          description: An array of budgets.
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Budgets'
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: The ID you requested was not found.
        '500':
          description: Something in the server was wrong.
  /budgets/{id}:
    get:
      tags:
      - Budgets
      summary: Fetches a budget.
      description: Fetches the information of a budget.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 123
          required: true
          description: The ID of the budget to request.
      responses:
        '200':
          description: The information of the budget requested.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: The budget ID you requested was not found.
        '500':
          description: Something in the server was wrong.
    put:
      tags:
      - Budgets
      summary: Updates a budget.
      description: Updates a budget.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 123
          required: true
          description: The ID of the budget to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBudget'
      responses:
        '200':
          description: A budget updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: The budget ID you requested was not found.
        '500':
          description: Something in the server was wrong.
    delete:
      tags:
      - Budgets
      summary: Deletes a budget.
      description: Deletes a budget and all its information.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 123
          required: true
          description: The ID of the budget to request.
      responses:
        '204':
          description: The budget has been deleted successfully.
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: The budget ID you requested was not found.
        '500':
          description: Something in the server was wrong.
  /resume:
    get:
      tags: 
      - Insights
      summary: Fetches a resume of the financial information of a user.
      description: Fetches a resume of the financial information of a user.
      parameters: 
      - in: query
        name: userId
        schema:
          type: integer
        required: true
        description: The ID of the user to fetch the resume.
      responses:
        '200':
          description: The resume of a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resume'
        '400':
          description: Something in the request was wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '500':
          description: Something in the server was wrong.
components:
  schemas:
    SignUpRequest:
      description: A representation of the data neccesary for signing up a client.
      required: 
      - name
      - firstLastName
      - secondLastName
      - email
      - companyName
      - username
      - password
      properties:
        name:
          description: The name or names of the client.
          type: string
          minimum: 1
          maximum: 50
          example: Juan Antonio
        firstLastName:
          description: The first last name of the client.
          type: string
          minimum: 1
          maximum: 20
          example: Pérez
        secondLastName:
          description: The second last name of the client.
          type: string
          minimum: 1
          maximum: 20
          example: García
        email:
          description: The email of the client.
          type: string
          minimum: 1
          maximum: 100
          example: juan.antonio.perez.garcia@gmail.com
        companyName:
          description: The company where the client belongs to.
          type: string
          minimum: 1
          maximum: 20
          example: Monsters Inc.
        username:
          description: The username of the client to access the platform.
          type: string
          minimum: 1
          maximum: 30
          example: juan.perez
        password:
          description: The password of the client to access the platform.
          type: string
          minimum: 1
          maximum: 100
          example: myPassword
    Client:
      description: A representation of a client.
      properties:
        id:
          description: The system ID of the client
          type: integer
          example: 123
        name:
          description: The name or names of the client.
          type: string
          minimum: 1
          maximum: 50
          example: Juan Antonio
        firstLastName:
          description: The first last name of the client.
          type: string
          minimum: 1
          maximum: 20
          example: Pérez
        secondLastName:
          description: The second last name of the client.
          type: string
          minimum: 1
          maximum: 20
          example: García
        email:
          description: The email of the client.
          type: string
          minimum: 1
          maximum: 100
          example: juan.antonio.perez.garcia@gmail.com
        companyName:
          description: The company where the client belongs to.
          type: string
          minimum: 1
          maximum: 20
          example: Monsters Inc.
        username:
          description: The username of the client to access the platform.
          type: string
          minimum: 1
          maximum: 30
          example: juan.perez
    LoginRequest:
      description: A representation of the data neccesary for logging in.
      required: 
        - username
        - password
      properties:
        username:
          type: string
          minimum: 1
          maximum: 100
          example: "client-username"
        password:
          type: string
          minimum: 1
          maximum: 100
          example: "client-password"
    LoginResponse:
      description: A representation of the data returned by login.
      required: 
        - username
        - roles
        - access_token
        - refresh_token
        - token_type
        - expires_in
      properties:
        username:
          type: string
          minimum: 1
          maximum: 100
          example: "client-username"
        roles:
          type: array
          example: 
          - "ROLE_USER"
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJmaW50b25pYy10ZXN0aW5nIiwibmJmIjoxNTkxMDI4ODMxLCJyb2xlcyI6WyJST0xFX1VTRVIiXSwiaXNzIjoiZmluZXJpby1jb25uZWN0LWxpdGUiLCJleHAiOjE1OTEwMzI0MzEsImlhdCI6MTU5MTAyODgzMX0.ZiY6aXhOU_mIi00pXIE4lHfhjBhyRb8-eVTfVAq34_"
        refresh_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJmaW50b25pYy10ZXN0aW5nIiwibmJmIjoxNTkxMDI4ODMxLCJyb2xlcyI6WyJST0xFX1VTRVIiXSwiaXNzIjoiZmluZXJpby1jb25uZWN0LWxpdGUiLCJleHAiOjE1OTEwMzI0MzEsImlhdCI6MTU5MTAyODgzMX0.ZiY6aXhOU_mIi00pXIE4lHfhjBhyRb8-eVTfVAq34_"
        token_type:
          type: string
          example: "Bearer"
        expires_in:
          type: integer
          example: 3600
    RefreshTokenResponse:
      description: A representation of the data returned by login.
      required: 
        - access_token
        - refresh_token
        - token_type
        - expires_in
      properties:
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJmaW50b25pYy10ZXN0aW5nIiwibmJmIjoxNTkxMDI4ODMxLCJyb2xlcyI6WyJST0xFX1VTRVIiXSwiaXNzIjoiZmluZXJpby1jb25uZWN0LWxpdGUiLCJleHAiOjE1OTEwMzI0MzEsImlhdCI6MTU5MTAyODgzMX0.ZiY6aXhOU_mIi00pXIE4lHfhjBhyRb8-eVTfVAq34_"
        refresh_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJmaW50b25pYy10ZXN0aW5nIiwibmJmIjoxNTkxMDI4ODMxLCJyb2xlcyI6WyJST0xFX1VTRVIiXSwiaXNzIjoiZmluZXJpby1jb25uZWN0LWxpdGUiLCJleHAiOjE1OTEwMzI0MzEsImlhdCI6MTU5MTAyODgzMX0.ZiY6aXhOU_mIi00pXIE4lHfhjBhyRb8-eVTfVAq34_"
        token_type:
          type: string
          example: "Bearer"
        expires_in:
          type: integer
          example: 3600
    CreateUser:
      description: A representation of the data neccesary for creating a user.
      required: 
        - name
      properties:
        name:
          type: string
          minimum: 1
          maximum: 100
          example: "user@email.com"
    User:
      description: A representation of a user.
      required:
        - name
      properties:
        id:
          type: integer
          example: 123
        name:
          type: string
          minimum: 1
          maximum: 100
          example: "user@email.com"
        dateCreated:
          type: number
          example: 1587567125458
    Users:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        nextCursor:
          type: integer
          example: 123
    CreateFinancialEntity:
      description: A representation of the data neccesary for creating a financial entity.
      required:
        - name
        - code
      properties:
        name:
          type: string
          minimum: 3
          maximum: 50
          example: "National Bank of Wakanda"
        code:
          type: string
          minimum: 3
          maximum: 20
          example: "WAKANDA-NB"
    UpdateFinancialEntity:
      description: A representation of the data neccesary for updating a financial entity.
      required:
        - name
        - code
      properties:
        name:
          type: string
          minimum: 3
          maximum: 50
          example: "National Bank of Wakanda"
        code:
          type: string
          minimum: 3
          maximum: 20
          example: "WAKANDA-NB"
    FinancialEntity:
      description: A representation of a financial entity.
      properties:
        id:
          type: integer
          example: 123
        name:
          type: string
          minimum: 3
          maximum: 50
          example: "National Bank of Wakanda"
        code:
          type: string
          minimum: 3
          maximum: 20
          example: "WAKANDA-NB"
        dateCreated:
          type: number
          example: 1587567125458
        lastUpdated:
          type: number
          example: 1587567125458
    FinancialEntities:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/FinancialEntity'
        nextCursor:
          type: integer
          example: 123
    CreateAccount:
      description: A representation of the data neccesary for creating an account.
      required:
        - userId
        - nature
        - name
        - number
        - balance
      properties:
        userId:
          type: number
          example: 123
        financialEntityId:
          type: number
          example: 123
        nature:
          $ref: '#/components/schemas/AccountNature'
        name:
          type: string
          minimum: 3
          maximum: 100
          example: "Premium Account"
        number:
          type: string
          minimum: 3
          maximum: 100
          example: "XXX-1234"
        balance:
          type: number
          example: 1234.56
    UpdateAccount:
      description: A representation of the data neccesary for updating an account.
      required:
        - nature
        - name
        - number
        - balance
      properties:
        nature:
          $ref: '#/components/schemas/AccountNature'
        name:
          type: string
          minimum: 3
          maximum: 100
          example: "Premium Account"
        number:
          type: string
          minimum: 3
          maximum: 100
          example: "XXX-1234"
        balance:
          type: number
          example: 1234.56
    Account:
      description: A representation of an account.
      properties:
        id:
          type: integer
          example: 123
        nature:
          $ref: '#/components/schemas/AccountNature'
        name:
          type: string
          minimum: 3
          maximum: 100
          example: "Premium Account"
        number:
          type: string
          minimum: 3
          maximum: 100
          example: "XXX-1234"
        balance:
          type: number
          example: 1234.56
        dateCreated:
          type: number
          example: 1587567125458
        lastUpdated:
          type: number
          example: 1587567125458
    Accounts:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Account'
        nextCursor:
          type: integer
          example: 123
    AccountNature:
      type: string
      enum:
        - Debit
        - Credit card
        - Credit
        - Investment
        - Mortgage
    CreateTransaction:
      description: A representation of the data neccesary for creating a transaction.
      required:
        - accountId
        - date
        - charge
        - description
        - amount
      properties:
        accountId:
          type: number
          example: 123
        date:
          type: number
          example: 1587567125458
        charge:
          type: boolean
          example: true
        description:
          type: string
          minimum: 3
          maximum: 200
          example: "UBER EATS"
        amount:
          type: number
          example: 1234.56
        categoryId:
          type: number
          example: 123
    UpdateTransaction:
      description: A representation of the data neccesary for updating a transaction.
      properties:
        date:
          type: number
          example: 1587567125458
        charge:
          type: boolean
          example: true
        description:
          type: string
          minimum: 3
          maximum: 200
          example: "UBER EATS"
        amount:
          type: number
          example: 1234.56
        categoryId:
          type: number
          example: 123
    Transaction:
      description: A representation of a transaction.
      properties:
        id:
          type: integer
          example: 123
        date:
          type: number
          example: 1587567125458
        charge:
          type: boolean
          example: true
        description:
          type: string
          minimum: 3
          maximum: 200
          example: "UBER EATS"
        amount:
          type: number
          example: 1234.56
        categoryId:
          type: number
          example: 123
        dateCreated:
          type: number
          example: 1587567125458
        lastUpdated:
          type: number
          example: 1587567125458
    Transactions:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
        nextCursor:
          type: integer
          example: 123
    CreateCategory:
      description: A representation of the data neccesary for creating a category.
      required:
        - name
      properties:
        userId:
          type: number
          example: 123
        name:
          type: string
          minimum: 3
          maximum: 50
          example: "Ropa y Calzado"
        color:
          type: string
          minimum: 6
          maximum: 6
          example: "#00FFAA"
        parentCategoryId:
          type: number
          example: 123
    UpdateCategory:
      description: A representation of the data neccesary for updating a category.
      properties:
        name:
          type: string
          minimum: 3
          maximum: 50
          example: "Ropa y Calzado"
        color:
          type: string
          minimum: 6
          maximum: 6
          example: "#00FFAA"
        parentCategoryId:
          type: number
          example: 123
    Category:
      description: A representation of a category.
      properties:
        id:
          type: integer
          example: 123
        name:
          type: string
          minimum: 3
          maximum: 50
          example: "Ropa y Calzado"
        color:
          type: string
          minimum: 6
          maximum: 6
          example: "#00FFAA"
        parentCategoryId:
          type: number
          example: 123
        userId:
          type: number
          example: 123
        dateCreated:
          type: number
          example: 1587567125458
        lastUpdated:
          type: number
          example: 1587567125458
    Categories:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        nextCursor:
          type: integer
          example: 123
    CreateBudget:
      description: A representation of the data neccesary for creating a budget.
      required:
        - userId
        - categoryId
        - name
        - amount
      properties:
        userId:
          type: number
          example: 123
        categoryId:
          type: number
          example: 123
        name:
          type: string
          minimum: 3
          maximum: 50
          example: "Food budget"
        amount:
          type: number
          example: 1234.56
        parentBudgetId:
          type: number
          example: 123
    UpdateBudget:
      description: A representation of the data neccesary for updating a budget.
      properties:
        categoryId:
          type: number
          example: 123
        name:
          type: string
          minimum: 3
          maximum: 50
          example: "Food budget"
        amount:
          type: number
          example: 1234.56
        parentBudgetId:
          type: number
          example: 123
    Budget:
      description: A representation of a budget.
      properties:
        id:
          type: integer
          example: 123
        categoryId:
          type: number
          example: 123
        name:
          type: string
          minimum: 3
          maximum: 50
          example: "Food budget"
        amount:
          type: number
          example: 1234.56
        parentBudgetId:
          type: number
          example: 123
        dateCreated:
          type: number
          example: 1587567125458
        lastUpdated:
          type: number
          example: 1587567125458
    Budgets:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Budget'
        nextCursor:
          type: integer
          example: 123
    Resume:
      description: A representation of the resume of the financial information of a user.
      properties:
        incomes:
          description: The incomes of a user, grouped by month
          type: array
          items:
            $ref: '#/components/schemas/ResumeByMonth'
        expenses:
          description: The expenses of a user, grouped by month
          type: array
          items:
            $ref: '#/components/schemas/ResumeByMonth'
        balances:
          description: The balance of the financial information of a user, grouped by month
          type: array
          items:
            $ref: '#/components/schemas/ResumeBalance'
    ResumeByMonth:
      description: Financial information grouped by month
      properties:
        date:
          description: The year and month of the information
          type: integer
          example: 15912423261854
        amount:
          description: The amount of the month.
          type: number
          example: 123.45
        categories:
          description: The financial information grouped by categories
          type: array
          items:
            $ref: '#/components/schemas/ResumeByCategory'
    ResumeByCategory:
      description: Financial information grouped by category
      properties:
        categoryId:
          description: The system ID of the category.
          type: integer
          example: 123
        amount:
          description: The amount of the category.
          type: number
          example: 123.45
        subcategories:
          description: The financial information grouped by subcategories
          type: array
          items:
            $ref: '#/components/schemas/ResumeBySubcategory'
    ResumeBySubcategory:
      description: Financial information grouped by subcategory
      properties:
        categoryId:
          description: The system ID of the subcategory.
          type: integer
          example: 123
        amount:
          description: The amount of the subcategory.
          type: number
          example: 123.45
        transactionsByDate:
          description: The transactions grouped by date
          type: array
          items:
            $ref: '#/components/schemas/MovementsByDate'
    MovementsByDate:
      description: The transactions grouped by date
      properties:
        date:
          description: The date of the transactions
          type: integer
          example: 15912423261854
        transactions:
          description: The transactions grouped by date
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
    ResumeBalance:
      description: The balance of the financial information of a user, grouped by month
      properties:
        date:
          description: The year and month of the information
          type: integer
          example: 15912423261854
        incomes:
          description: The incomes of the month.
          type: number
          example: 123.45
        expenses:
          description: The expeenses of the month.
          type: number
          example: 123.45
    Errors:
      description: An array of errors
      type: array
      items:
        $ref: '#/components/schemas/Error'
    Error:
      description: A detailed description of an error
      properties:
        title:
          type: string
          example: "User name is null"
        code:
          type: string
          example: "user.name.null"
        detail:
          type: string
          example: "The name of the user you provided was null. Please provide a valid one."
    